version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: webhookproxy
      POSTGRES_PASSWORD: webhookproxy_password
      POSTGRES_DB: webhookproxy
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U webhookproxy"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  server:
    build:
      context: .
      dockerfile: docker/Dockerfile.server
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://webhookproxy:webhookproxy_password@postgres:5432/webhookproxy
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      API_KEY_SALT: ${API_KEY_SALT:-your-api-key-salt-change-this}
      API_BASE_URL: ${API_BASE_URL:-http://localhost:3001}
      WEB_BASE_URL: ${WEB_BASE_URL:-http://localhost}
      PUBLIC_WEBHOOK_URL: ${PUBLIC_WEBHOOK_URL:-http://localhost}
    ports:
      - "3001:3001"
    command: sh -c "pnpm prisma migrate deploy && node dist/index.js"

  web:
    build:
      context: .
      dockerfile: docker/Dockerfile.web
    restart: unless-stopped
    depends_on:
      - server
    ports:
      - "80:80"

volumes:
  postgres_data:
  redis_data: