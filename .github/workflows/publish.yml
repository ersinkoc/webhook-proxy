name: Publish NPM Packages

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      dry_run:
        description: 'Dry run (no actual publish)'
        required: false
        default: false
        type: boolean

jobs:
  publish:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Run tests
      run: pnpm test
    
    - name: Run linting
      run: pnpm lint
    
    - name: Run type checking
      run: pnpm typecheck
    
    - name: Version bump (if manual trigger)
      if: github.event_name == 'workflow_dispatch'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Bump version in all packages
        for package_dir in packages/cli packages/shared; do
          if [ -f "$package_dir/package.json" ]; then
            cd "$package_dir"
            npm version ${{ github.event.inputs.version_bump }} --no-git-tag-version
            cd ../..
          fi
        done
        
        # Update root package.json version too
        npm version ${{ github.event.inputs.version_bump }} --no-git-tag-version
        
        # Commit version changes
        git add package.json packages/*/package.json
        git commit -m "Bump version to ${{ github.event.inputs.version_bump }}"
        
        # Create and push tag
        NEW_VERSION=$(node -p "require('./package.json').version")
        git tag "v$NEW_VERSION"
        git push origin HEAD --tags
    
    - name: Build packages
      run: |
        cd packages/shared && npm run build && cd ../..
        cd packages/cli && npm run build && cd ../..
    
    - name: Test publish pipeline
      run: node scripts/publish.js --dry-run
    
    - name: Publish packages
      if: github.event.inputs.dry_run != 'true'
      env:
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: |
        chmod +x scripts/publish.sh
        ./scripts/publish.sh
    
    - name: Create GitHub Release
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && github.event.inputs.dry_run != 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## Changes
          
          See [CHANGELOG.md](CHANGELOG.md) for details.
          
          ## Installation
          
          ```bash
          npm install -g @ersinkoc/webhook-proxy-cli
          ```
          
          ## Packages Published
          
          - `@ersinkoc/webhook-proxy-cli` - Command-line interface
          - `@ersinkoc/webhook-proxy-shared` - Shared utilities and types
          
          ## Documentation
          
          - [CLI Documentation](packages/cli/README.md)
          - [API Documentation](docs/API.md)
          - [GitHub Repository](https://github.com/ersinkoc/webhook-proxy)
        draft: false
        prerelease: false
    
    - name: Upload build artifacts
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          packages/*/dist/
          packages/*/coverage/
          *.log
    
    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'ðŸš¨ NPM Publish Failed',
            body: `The NPM publish workflow failed for ${context.ref}.\n\nPlease check the [workflow run](${process.env.GITHUB_SERVER_URL}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.\n\n**Failure Details:**\n- Workflow: ${context.workflow}\n- Run ID: ${context.runId}\n- Event: ${context.eventName}\n- Ref: ${context.ref}`,
            labels: ['bug', 'ci/cd', 'npm-publish']
          });

  test-install:
    needs: publish
    runs-on: ubuntu-latest
    if: github.event.inputs.dry_run != 'true'
    
    steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Test CLI installation
      run: |
        # Wait a bit for npm to propagate
        sleep 30
        
        # Test global installation
        npm install -g @ersinkoc/webhook-proxy-cli
        
        # Test that CLI is working
        webhook-proxy --help
        
        # Test package installation
        npm install @ersinkoc/webhook-proxy-shared
        
        echo "âœ… All packages installed successfully!"
    
    - name: Create installation test report
      run: |
        echo "## Installation Test Report" > test-report.md
        echo "" >> test-report.md
        echo "- âœ… CLI package installs globally" >> test-report.md
        echo "- âœ… CLI command works" >> test-report.md
        echo "- âœ… Shared package installs" >> test-report.md
        echo "" >> test-report.md
        echo "All packages are ready for use!" >> test-report.md
    
    - name: Upload test report
      uses: actions/upload-artifact@v3
      with:
        name: installation-test-report
        path: test-report.md